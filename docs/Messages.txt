Message format

cmd:    Command String (e.g., PING, REGISTER). This gives the major operation that
        needs to be done. That is the purpose of the message.

opt:    An option that is relevant for the given command. This is highly context
        dependent.
      
actname:    The name of the sender. In most cases the name of the module that is
        sending the message. The activity name, the main thread ("MAIN") or 
        the pinging thread ("PINGER") and so on.

actid:  The activity ID. 
   
actarg:  An optional argument associated with the activity. 
        
args:   Arguments that are necessary for the given command. Some commands may not have
        any arguments.
 
 
Note: In the following section, we show the message format. The way it is described
is the following.

[[ Message format ]]

Description of the message format and where it is used.        
The [[ ]] are not part of the message format. 


Register a device in a Fog
==========================

The Fog has a device registration port. A device dials up this port and registers before
as the first step. 

[[ REGISTER DEVICE app_name device_id device_name ]] 

App_name and device_name are arbitrary strings given by the user or daemon starting the device. 
If the device_id is already part of the system, the J server creates and alternate device_id and
registers the device under that device_id. 

[[ REGISTER-ACK ORI app_name device_id device_name port ]]

A successful registration with the device_id as originally proposed by the device. The
device is told by the Fog to contact it at the given port.

[[ REGISTER-ACK ALT app_name device_id(new) device_name port ]] 

The registration has taken place under an alternate device_id. The originally proposed device_id
is not available because it is in use.

[[ REGISTER-ERR FOG app_name __ device_name err_string ]]

The registration has failed. 

A successful registration gives the device its own port for direct messaging. All devices
share global publish and survey ports at the Fog.

[[ DEREGISTER DEVICE app_name device_id device_name ]]

This de-registers the device and releases the port. 

[[ DEREGISTER-ACK FOG app_name device_id device_name ]]

[[ DEREGISTER-IGN FOG app_name device_id device_name ]]


Heartbeating of the device in a Fog
===================================

The device is sending the PING and it expects a PONG back from the Fog.
The message formats are given below.

[[ PING DEVICE PINGER device_id device_name ]]

Ping is originating from the device. This is heartbeat trigger from the device.


[[ PONG FOG PINGER device_id device_name ]]

Fog is replying to the "ping" sent by the device. 

Remote Execution from C to J (Synchronous)
==========================================

First lets consider the synchronous version of C to J. 

[[ REXEC SYN actname actid device_id args ]]

[[ REXEC-ACK SYN ACTIVITY actid device_id lease-value (arg0) ]]

[[ REXEC-NAK SYN ACTIVITY actid device_id error-code (arg0) ]]

[[ REXEC-RES GET actname actid device_id ]]

[[ REXEC-RES PUT ACTIVITY actid code-type return-code ]] 


Remote Execution from C to J (Asynchronous)
===========================================

[[ REXEC ASY actname actid device_id args ]]

[[ REXEC-ACK ASY ACTIVITY actid device_id lease-value (arg0) ]]

[[ REXEC-NAK ASY ACTIVITY actid device_id error-code (arg0) ]]


>>>>>> OLD VERSION BEGINS >>>>>

        We have two types of activity executions: synchronous and asynchronous. We could have
        the same message protocol for both synchronous and asynchronous executions. 

        [[ REXEC DEVICE actname device_id runid args ]] 

        Sent from the device to the Fog. The device is asking the Fog to run a particular
        activity. The Fog is reponsible for creating an instance of the activity. So the
        activity ID (actid) should be received back from the Fog.

        [[ REXEC-ACK FOG ACTIVITY actid runid lease-value (arg0) ]]

        The arg0 would be lease value within which the Fog agreed to 
        get back regarding the execution of the activity. 

        [[ REXEC-NAK FOG ACTIVITY __  runid error-code (arg0)]]

        The request for activity execution resulted in an error. Obviously, the activity 
        execution did not even start at the Fog. 

        [[ REXEC-SUC FOG actname actid ret-code (arguments - could depend on what the result code is) ]]

        At least according the C convention we need have only one result value.
        This is from Fog to the device.  

        [[ REXEC-FAI FOG actname actid error-code (arguments - could depend on the error routine?) ]]

        Again this is very similar to the previous one. This one is implying that the activity
        execution has ended in an erroneous condition and the error code is returned so that the
        receiving activity could continue with the correct execution path.
        Again, this is from the Fog to the cloud. 

>>>>>> OLD VERSION ENDS >>>>>


Remote Execution from J to C (Synchronous)
==========================================

[[ REXEC-CALL SYN actname runid expression args ]] (published)

[[ REXEC-RDY SYN actname actid runid ]] 

[[ REXEC-STA SYN EVENTLOOP actid runid ]]


[[ REXEC FOG actname expression args (sent over publish) ]]

The Fog controller is publishing the above REXEC asking whether any device
is willing to execute the given activity.

Devices interested in executing the activity would run the expression to check
whether they are eligible. If they are eligible, the devices would send in
their response using the following message. 

[[ REXEC-RDY DEVICE actname actid runid lease-value (arg0) expiry-time (arg1) ]]

The Fog controller can select one or more of the devices to execute 
the given activity. The Fog needs to respond within the expiry-time. Otherwise, the device
will throw away the previous offer to execute the activity. The actid
is the activity ID when the device starts executing it.

[[ REXEC-STA FOG EVENTLOOP actid ]] 

Once the device receives the REXEC-STA message it is going to start the execution of the
activity with the given actid. 


Remote Execution from J to C (Asynchronous)
==========================================

[[ REXEC-CALL ASY actname runid/__ expression args ]] (published)

[[ REXEC-RDY ASY actname actid runid ]] 

[[ REXEC-STA ASY EVENTLOOP actid runid ]]

[[ REXEC-QUI ASY EVENTLOOP actid runid ]]



Obtaining Execution Reports from the Fog and Devices
====================================================

Execution reports are necessary part of the protocol used by JAMScript.
Fog or devices could be asking for status reports after or just before a lease on an
ongoing activity execution is to expire. 

[[ REPORT-REQ DEVICE actname actid __ ]]

The device is requesting a report from the Fog on the execution of a particular activity.

[[ REPORT-REP FOG actname actid __ message-type-code message-arg ]]

The reply from the Fog could tell the device many things: extension of the lease (LEASE-EXT), or 
activity completed successfully (COMPLETE-SUC), completed erroneously (COMPLETE-ERR).
The second argument (message-arg) is the parameter for this one.

Like the devices, the Fog can request execution reports from the devices as well.

[[ REPORT-REQ FOG actname __ runid ]]

The Fog is sending out a survey asking which devices are still working on the particular activity.
May be we need another ID type to indicate whether a particular instance of an activity is still working.

[[ REPORT-REP DEVICE actname actid message-type-code message-arg ]]

This is same as the previous case. However, the way it is delivered is different. In this case,
we are replying to a survey. 


Terminating Execution Commands in Fog and Devices
=================================================

There would be situations when we need to terminate activities that are running in the devices or Fog.
We have a command in the protocol to allow that.

[[ RKILL DEVICE actname actid __ ]] 

In the above command the device is asking the Fog to terminate an activity that is already ongoing.
The device gives the activity ID

[[ RKILL-ACK FOG actname actid __ ]]

The Fog replies with an acknowledgement if it is able to kill the activity.

[[ RKILL-IGN FOG actname __ ]]

The Fog replies with an ignored message if the kill is ignored. The kill is ignored because
the activity has already expired.

[[ RKILL FOG actname __ runid ]]

The Fog sends out the above message as a survey to kill all ongoing instances of the activity in the
devices. The devices would respond with one of the following messages.

[[ RKILL-ACK DEVICE actname actid ]]
[[ RKILL-IGN DEVICE actname __ ]]

The actid in the acknowledgement represents the ID of the activity that was terminated.


Cloud Connection
================

We need protocols for joining and leaving for the Fogs. When a Fog comes in contact with the Cloud, it should join with the shadow Fog.
In addition, when a Fog comes in contact with another Fog, they should join too provided the trust negotiation works out.

Fog Discovery Protocol
======================
This for a Fog to discover the cloud connectivity and the presence of other Fogs.
TODO: We need ad-hoc discoverability. Unfortunately, that support is not there in Nano Messages. So we
need to go through the cloud. 

[[ DISCOVER FOG app_name fog_name fog_id ]]

The above message is sent as a request-reply to the cloud. The cloud would respond to the above
discovery with the following messages.

[[ FOUND CLOUD app_name Qualifier list-of-fog-servers ]]

Here the cloud is reporting a list of Fog servers that are available in the system or near vicinity
The Qualifier could be "NEAR" or "ALL".

[[ FOUND CLOUD app_name "ALL" ]] 

This indicates an empty response and not Fog. A Fog is not told its own address. 

If the cloud is out of reach, the disovery message would just time out.


Fog Joining Protocol
====================



Fog Leaving Protocol
====================




Data Handling
=============




Event Handling
==============




